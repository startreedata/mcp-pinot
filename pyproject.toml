[project]
name = "mcp-pinot-server"
version = "0.1.0"
description = "A production-grade MCP server for Apache Pinot"
license = { text = "Apache-2.0" }
requires-python = ">=3.10"
dependencies = [
    "mcp[cli]>=1.6.0",
    "pinotdb>=5.6.0",
    "uvicorn>=0.34.0",
    "python-dotenv>=1.0.1",
    "httpx>=0.27.2",
    "pandas>=2.2.3",
    "requests>=2.32.3",
]

[project.scripts]
mcp-pinot = "mcp_pinot.server:main"

[project.urls]
Home = "http://github.com/startreedata/mcp-pinot"

[project.optional-dependencies]
dev = [
    "pytest",
    "pytest-asyncio",
    "pytest-mock",
    "pytest-cov",
    "ruff>=0.1.6",
]

[build-system]
requires = ["setuptools", "wheel"]
build-backend = "setuptools.build_meta"

[tool.setuptools]
packages = ["mcp_pinot"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--tb=short",
    "--strict-markers",
]

[tool.ruff]
target-version = "py310"
line-length = 88
src = ["mcp_pinot"]

[tool.ruff.lint]
select = [
    # Phase 1: Foundation rules
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings  
    "F",      # Pyflakes
    "I",      # isort
    "S",      # bandit security
]

ignore = [
    # Development necessities
    "S104",    # bind all interfaces (dev servers)
    "S108",    # temp files (testing)
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = [
    "S101",   # assert statements
    "S106",   # hardcoded passwords in fixtures
    "S108",   # temp files
]

[tool.ruff.lint.isort]
known-first-party = ["mcp_pinot"]
force-sort-within-sections = true
split-on-trailing-comma = true

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.uv.workspace]
members = [
    "mcp-pinot",
]
